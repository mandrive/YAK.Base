@model QuestionViewModel

@using Humanizer
@using Yak.Web.Models
@using Yak.Web.Utils

@{
    ViewBag.Title = "View";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    var blockVoteUpOption = Model.HasUserAlreadyVotedUp(User.DatabaseUser.Id);
    var blockVoteDownOption = Model.HasUserAlreadyVotedDown(User.DatabaseUser.Id);
    var alreadyAnswered = Model.HasUserAlreadyAnsweredQuestion(User.DatabaseUser.Id);
}
<div class="col-lg-12 col-md-12 col-xs-12">
    <div class="question-details">
        <div class="question-title">
            Question: @Model.Question.Title
        </div>
        <div class="vote-box">
            <div class="vote-up @if (blockVoteUpOption) { <text>vote-blocked</text> }" data-questionId="@Model.Question.Id"><i class="fa fa-arrow-circle-o-up fa-3 size-3em"></i></div>
            <div class="votes-count"><span style="font-size: 2em;">@Model.Question.RankPoint</span></div>
            <div class="vote-down @if (blockVoteDownOption) { <text>vote-blocked</text> }" data-questionId="@Model.Question.Id"><i class="fa fa-arrow-circle-o-down fa-3 size-3em"></i></div>
        </div>
        <div class="question-content">
            <div class="question-author-details pull-right col-md-2 text-center">
                <img width="82" height="82" src="@Url.Content("~/Content/images/user128.png")" />
                <div>@Model.Question.LastModificationDate.Humanize(true, DateTime.UtcNow, System.Globalization.CultureInfo.InvariantCulture)</div>
                <div>by</div>
                <div>@Model.Question.AuthorName</div>
            </div>
            @Html.TransformToMarkdown(@Model.Question.Content)
            <div class="clearfix">
                <div class="clearfix question-tags">
                    @foreach (var item in Model.Question.Tags)
                    {
                        <span class="label label-default">@item.Name</span>
                    }
                </div>
                <div class="question-actions">
                    <span class="label label-default add-comment">ADD COMMENT</span>
                    @if (Model.Question.Author.Id == User.DatabaseUser.Id)
                    {
                        @:•
                        @Html.ActionLink("Edit", "Edit", new { id = Model.Question.Id })
                    }
                </div>
                <div class="question-comments">
                    @Html.Partial("CommentsList", Model.CommentViewModels)
                    <div class="comment-editor hidden">
                        @using (Html.BeginForm("AddComment", "Comment", FormMethod.Post))
                        {
                            @Html.AntiForgeryToken()
                            @Html.Hidden("QuestionId", Model.Question.Id)
                            @Html.TextArea("Content", new { @class = "form-control" })
                            <input type="submit" value="add comment" />
                        }
                    </div>
                </div>

            </div>
        </div>
    </div>
    <hr/>
    @Html.Partial("AnswersList", Model.AnswersViewModels)
    <button class="@if (!alreadyAnswered) { <text>hidden</text> } btn btn-default toggleAnswerEditor">Add new answer</button>
    <div class="@if (alreadyAnswered) { <text>hidden</text> } answer-editor-container">
        @Html.Partial("Answer", new AnswerViewModel(Model.Question.Id, User.DatabaseUser.Id))
    </div>
</div>

<script type="text/javascript">
    $(".question-details .vote-box .vote-up").click(function () {
        var self = $(this);
        var questionId = $(this).attr("data-questionId");
        var $votesCountElement = $(this).parent().find(".votes-count span");

        if ($(this).hasClass("vote-blocked")) return;

        $.ajax(
            {
                url: '@Url.Action("VoteUp", "Question")',
                data: { "questionId": questionId },
                dataType: "json",
                method: "post",
                success: function (data) {
                    $votesCountElement.text(data.rankPoint);
                    self.addClass("vote-blocked");
                    self.parent().find(".vote-down").removeClass("vote-blocked");
                }
            });
    });

    $(".question-details .vote-box .vote-down").click(function () {
        var self = $(this);
        var questionId = $(this).attr("data-questionId");
        var $votesCountElement = $(this).parent().find(".votes-count span");

        if ($(this).hasClass("vote-blocked")) return;

        $.ajax(
            {
                url: '@Url.Action("VoteDown", "Question")',
                data: { "questionId": questionId },
                dataType: "json",
                method: "post",
                success: function (data) {
                    $votesCountElement.text(data.rankPoint);
                    self.addClass("vote-blocked");
                    self.parent().find(".vote-up").removeClass("vote-blocked");
                }
            });
    });

    $(".toggleAnswerEditor").click(function () {
        $(this).removeClass("show").addClass("hidden");
        $(".answer-editor-container").removeClass("hidden");
    });

    $(".question-actions > span.add-comment").click(function () {
        $(".question-comments .comment-editor").removeClass("hidden");
    });

</script>